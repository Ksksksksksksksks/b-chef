from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import CommandStart
import asyncio
import json

bot = Bot(token="8198073291:AAHkwGVrX2TWllCBSPrfGP978B6BH0WnJwk")
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ JSON
with open("recipes.json", "r", encoding="utf-8") as f:
    recipes = json.load(f)

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
RECIPE_LIST = {
    "ü•ö –Ø–∏—á–Ω–∏—Ü–∞": "—è–∏—á–Ω–∏—Ü–∞",
    "üçù –ú–∞–∫–∞—Ä–æ–Ω—ã": "–º–∞–∫–∞—Ä–æ–Ω—ã",
    "üçö –†–∏—Å": "—Ä–∏—Å",
    "üåæ –ì—Ä–µ—á–∫–∞": "–≥—Ä–µ—á–∫–∞",
    "ü•ö –í–∞—Ä—ë–Ω—ã–µ —è–π—Ü–∞": "—è–π—Ü–∞",
    "ü•© –ñ–∞—Ä–µ–Ω–æ–µ –º—è—Å–æ": "–∂–∞—Ä–µ–Ω–æ–µ –º—è—Å–æ",
    "üçñ –¢—É—à—ë–Ω–æ–µ –º—è—Å–æ": "—Ç—É—à—ë–Ω–æ–µ –º—è—Å–æ",
    "ü•î –ñ–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞": "–∂–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞"
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def mode_keyboard():
    kb = [
        [KeyboardButton(text="üç≥ –°—É—Ä–æ–≤—ã–π –†–∞–º–∑–∏"), KeyboardButton(text="üëµ –ú–∏–ª–∞—è –±–∞–±—É—à–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def recipes_keyboard():
    kb = [
        [KeyboardButton(text="ü•ö –Ø–∏—á–Ω–∏—Ü–∞"), KeyboardButton(text="üçù –ú–∞–∫–∞—Ä–æ–Ω—ã")],
        [KeyboardButton(text="üçö –†–∏—Å"), KeyboardButton(text="üåæ –ì—Ä–µ—á–∫–∞")],
        [KeyboardButton(text="ü•ö –í–∞—Ä—ë–Ω—ã–µ —è–π—Ü–∞"), KeyboardButton(text="ü•î –ñ–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞")],
        [KeyboardButton(text="ü•© –ñ–∞—Ä–µ–Ω–æ–µ –º—è—Å–æ"), KeyboardButton(text="üçñ –¢—É—à—ë–Ω–æ–µ –º—è—Å–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def actions_keyboard():
    kb = [
        [KeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç")],
        [KeyboardButton(text="üç≤ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ")],
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ ---
def feedback_keyboard():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëç –õ–∞–π–∫", callback_data="feedback_like"),
             InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data="feedback_dislike")]
        ]
    )
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –∫—É—Ö–Ω–µ.\n–í—ã–±–µ—Ä–∏, –∫—Ç–æ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –≥–æ—Ç–æ–≤–∏—Ç—å:",
        reply_markup=mode_keyboard()
    )

@dp.message(F.text.in_(["üç≥ –°—É—Ä–æ–≤—ã–π –†–∞–º–∑–∏", "üëµ –ú–∏–ª–∞—è –±–∞–±—É—à–∫–∞"]))
async def choose_mode(message: Message):
    user_data[message.from_user.id] = {"mode": message.text, "recipe": None}
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ‚Äî {message.text}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±–ª—é–¥–æ:",
        reply_markup=recipes_keyboard()
    )

@dp.message(F.text.in_(list(RECIPE_LIST.keys())))
async def choose_recipe(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è! /start")
        return

    recipe_name = RECIPE_LIST[message.text]
    user_data[user_id]["recipe"] = recipe_name
    recipe = recipes[recipe_name]

    text = (
        f"üçΩ {recipe['name']}\n\n"
        f"üïí –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe['time']}\n"
        f"üõí –ü—Ä–æ–¥—É–∫—Ç—ã: {', '.join(recipe['ingredients'])}\n\n"
        f"üë®‚Äçüç≥ –®–∞–≥–∏:\n" + "\n".join(f'{i+1}. {step}' for i, step in enumerate(recipe['steps'])) +
        "\n\nüì∏ –ñ–¥—É —Ç–≤–æ–∏ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–æ—Ç–æ–≤–∫–∏!"
    )

    await message.answer(text, reply_markup=actions_keyboard())

@dp.message(F.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç")
async def show_recipe(message: Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)
    if not data or not data.get("recipe"):
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –±–ª—é–¥–æ! üç≤")
        return

    recipe = recipes[data["recipe"]]
    text = (
        f"üçΩ {recipe['name']}\n\n"
        f"üïí –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe['time']}\n"
        f"üõí –ü—Ä–æ–¥—É–∫—Ç—ã: {', '.join(recipe['ingredients'])}\n\n"
        f"üë®‚Äçüç≥ –®–∞–≥–∏:\n" + "\n".join(f'{i+1}. {step}' for i, step in enumerate(recipe['steps']))
    )
    await message.answer(text, reply_markup=actions_keyboard())

@dp.message(F.text == "üç≤ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ")
async def new_recipe(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ:", reply_markup=recipes_keyboard())

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É")
async def finish_cooking(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("–ì–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëè –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–µ—à—å—Å—è!", reply_markup=mode_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ü–µ–Ω–∫–∏ ---
@dp.message(F.video_note)
async def handle_video(message: Message):
    await message.reply(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–¥–µ–æ! üé• –£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        reply_markup=feedback_keyboard()
    )

@dp.message(F.photo)
async def handle_photo(message: Message):
    await message.reply(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! üì∏ –£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        reply_markup=feedback_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ ---
@dp.callback_query(F.data.startswith("feedback_"))
async def feedback_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    choice = callback.data.split("_")[1]  # "like" –∏–ª–∏ "dislike"

    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]["last_feedback"] = choice

    await callback.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    if choice == "like":
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üòä")
    else:
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üëç")

    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@dp.message()
async def handle_other(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üòä", reply_markup=actions_keyboard())

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
